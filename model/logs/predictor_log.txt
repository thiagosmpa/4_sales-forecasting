Beginning AutoGluon training... Time limit = 900s
AutoGluon will save models to 'model'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.10.14
Operating System:   Darwin
Platform Machine:   arm64
Platform Version:   Darwin Kernel Version 23.5.0: Wed May  1 20:16:51 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T8103
CPU Count:          8
GPU Count:          0
Memory Avail:       1.33 GB / 8.00 GB (16.6%)
Disk Space Avail:   27.61 GB / 228.27 GB (12.1%)
===================================================
Setting presets to: best_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': RMSE,
 'freq': 'D',
 'hyperparameters': 'default',
 'known_covariates_names': ['estoque', 'preco'],
 'num_val_windows': 5,
 'prediction_length': 37,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'venda',
 'time_limit': 900,
 'verbosity': 2}

train_data with frequency 'None' has been resampled to frequency 'D'.
Provided train_data has 906 rows (NaN fraction=0.7%), 1 time series. Median time series length is 906 (min=906, max=906). 

Provided data contains following columns:
	target: 'venda'
	known_covariates:
		categorical:        []
		continuous (float): ['estoque', 'preco']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'RMSE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2024-09-06 12:18:32
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 69.1s of the 898.6s of remaining time.
	-131.1614     = Validation score (-RMSE)
	2.89    s     = Training runtime
	0.02    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 74.6s of the 895.6s of remaining time.
	-87.3394      = Validation score (-RMSE)
	14.15   s     = Training runtime
	0.53    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 80.1s of the 880.9s of remaining time.
	-94.4339      = Validation score (-RMSE)
	4.82    s     = Training runtime
	0.03    s     = Validation (prediction) runtime
Training timeseries model CrostonSBA. Training for up to 87.6s of the 876.1s of remaining time.
	-96.9603      = Validation score (-RMSE)
	9.37    s     = Training runtime
	0.02    s     = Validation (prediction) runtime
Training timeseries model NPTS. Training for up to 96.3s of the 866.7s of remaining time.
	-91.5560      = Validation score (-RMSE)
	0.36    s     = Training runtime
	0.09    s     = Validation (prediction) runtime
Training timeseries model DynamicOptimizedTheta. Training for up to 108.3s of the 866.2s of remaining time.
	-131.5870     = Validation score (-RMSE)
	17.52   s     = Training runtime
	7.30    s     = Validation (prediction) runtime
Training timeseries model AutoETS. Training for up to 120.2s of the 841.4s of remaining time.
	-131.4408     = Validation score (-RMSE)
	8.30    s     = Training runtime
	0.12    s     = Validation (prediction) runtime
Training timeseries model AutoARIMA. Training for up to 138.8s of the 833.0s of remaining time.
	-94.7449      = Validation score (-RMSE)
	20.11   s     = Training runtime
	1.87    s     = Validation (prediction) runtime
Training timeseries model Chronos[base]. Training for up to 162.2s of the 811.0s of remaining time.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Chronos[base]/W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
Training timeseries model TemporalFusionTransformer. Training for up to 201.6s of the 806.5s of remaining time.
	-79.9678      = Validation score (-RMSE)
	197.18  s     = Training runtime
	0.02    s     = Validation (prediction) runtime
Training timeseries model DeepAR. Training for up to 203.1s of the 609.3s of remaining time.
	-82.5426      = Validation score (-RMSE)
	198.54  s     = Training runtime
	0.14    s     = Validation (prediction) runtime
Training timeseries model PatchTST. Training for up to 205.3s of the 410.6s of remaining time.
	-88.3516      = Validation score (-RMSE)
	144.01  s     = Training runtime
	0.01    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
	Ensemble weights: {'DeepAR': 0.19, 'PatchTST': 0.07, 'RecursiveTabular': 0.23, 'TemporalFusionTransformer': 0.52}
	-76.5229      = Validation score (-RMSE)
	2.22    s     = Training runtime
	0.70    s     = Validation (prediction) runtime
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'WeightedEnsemble']
Total runtime: 634.55 s
Best model: WeightedEnsemble
Best model score: -76.5229
data with frequency 'None' has been resampled to frequency 'D'.
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
data with frequency 'None' has been resampled to frequency 'D'.
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Loading predictor from path model
data with frequency 'None' has been resampled to frequency 'D'.
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
data with frequency 'None' has been resampled to frequency 'D'.
data with frequency 'None' has been resampled to frequency 'D'.
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
